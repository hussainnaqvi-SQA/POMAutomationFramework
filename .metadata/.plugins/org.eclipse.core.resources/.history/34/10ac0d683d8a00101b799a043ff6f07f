package com.automation.tests;

import com.automation.base.BasePage;
import com.automation.base.BaseTest;
import com.automation.pages.LoginPage;
import com.automation.utils.AssertUtils;
import com.automation.utils.CSVDataProvider;
import com.automation.utils.LoggerUtil;
import com.automation.utils.DriverManager;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import java.util.Map;

import org.slf4j.Logger;

public class LoginTests extends BaseTest {
    private static final Logger log = LoggerUtil.getLogger(LoginTests.class);
    private LoginPage loginPage;

    @BeforeMethod
    public void initPage() {
        // Always get the current fresh driver
    	System.out.println("Page sees driver hash: " + DriverManager.getDriver().hashCode());
        loginPage = new LoginPage();
    }

    @Test(dataProvider = "loginData", dataProviderClass = CSVDataProvider.class, groups = {"login", "smoke", "positive"})
    public void PositiveTest_LoginUsingEmail(Map<String, String> data) {
    	String email = data.get("email");
        String password = data.get("password");
        LoggerUtil.logInfo(log, "===== Starting Login Test for: " + email + " (" + password + ") =====");

        AssertUtils.assertTrue(loginPage.isLoginButtonVisible(getExtentTest()), "Login button should be visible");

        loginPage.loginWithEmail(email, password, getExtentTest());

        AssertUtils.assertTrue(loginPage.loginValidCheck("Two Step Authentication", getExtentTest()), "Login Failed");
       
    }
    @Test(dataProvider = "loginData", dataProviderClass = CSVDataProvider.class, groups = {"login", "smoke", "positive"})
    public void PositiveTest_LoginUsingPhone(Map<String, String> data) {
    	String phone = data.get("phone");
        String password = data.get("password");
        LoggerUtil.logInfo(log, "===== Starting Login Test for: " + phone + " (" + password + ") =====");

        AssertUtils.assertTrue(loginPage.isLoginButtonVisible(getExtentTest()), "Login button should be visible");
        loginPage.switchLoginMode(getExtentTest());
        loginPage.loginWithPhone(phone, password, getExtentTest());

        AssertUtils.assertTrue(loginPage.loginValidCheck("Two Step Authentication", getExtentTest()), "Login Failed");
       
    }
    @Test(dataProvider = "loginData", dataProviderClass = CSVDataProvider.class, groups = {"login", "smoke", "negative"})
    public void NegativeTest_LoginWithEmptyEmail(Map<String, String> data) {
    	String password = data.get("password");
    	LoggerUtil.logInfo(log, "===== Starting Negative Login Test with Empty Email with valid Password: (" + password + ") =====");
    	AssertUtils.assertTrue(loginPage.isLoginButtonVisible(getExtentTest()), "Login button should be visible");
    	loginPage.loginWithEmail("", password, getExtentTest());
    	AssertUtils.assertTrue(loginPage.emptyEmailCheck("Please enter an email address", getExtentTest()), "Validation failed: Expected email address error");
    	
    }
    @Test(dataProvider = "loginData", dataProviderClass = CSVDataProvider.class, groups = {"login", "smoke", "negative"})
    public void NegativeTest_LoginWithEmptyPhone(Map<String, String> data) {
    	String password = data.get("password");
    	LoggerUtil.logInfo(log, "===== Starting Negative Login Test with Empty Password with valid Password: (" + password + ") =====");
    	AssertUtils.assertTrue(loginPage.isLoginButtonVisible(getExtentTest()), "Login button should be visible");
    	loginPage.switchLoginMode(getExtentTest());
    	loginPage.loginWithPhone("", password, getExtentTest());
    	AssertUtils.assertTrue(loginPage.emptyPhoneCheck("Please enter a phone number", getExtentTest()), "Validation failed: Expected phone number error");
    	
    }
    @Test(dataProvider = "loginData", dataProviderClass = CSVDataProvider.class, groups = {"login", "smoke", "negative"})
    public void NegativeTest_LoginWithValidEmailAndEmptyPassword(Map<String, String> data) {
    	String email = data.get("email");
    	LoggerUtil.logInfo(log, "===== Starting Negative Login Test with valid Email with empty Password: =====");
    	AssertUtils.assertTrue(loginPage.isLoginButtonVisible(getExtentTest()), "Login button should be visible");
    	loginPage.loginWithEmail(email, "", getExtentTest());
    	AssertUtils.assertTrue(loginPage.emptyPasswordCheck("Please enter a valid password!", getExtentTest()), "Validation failed: Expected password error");
    	
    }
    @Test(dataProvider = "loginData", dataProviderClass = CSVDataProvider.class, groups = {"login", "smoke", "negative"})
    public void NegativeTest_LoginWithValidPhoneAndEmptyPassword(Map<String, String> data) {
    	String phone = data.get("phone");
    	LoggerUtil.logInfo(log, "===== Starting Negative Login Test with valid Phone Number with empty Password: =====");
    	AssertUtils.assertTrue(loginPage.isLoginButtonVisible(getExtentTest()), "Login button should be visible");
    	loginPage.switchLoginMode(getExtentTest());
    	loginPage.loginWithEmail(phone, "", getExtentTest());
    	AssertUtils.assertTrue(loginPage.emptyPasswordCheck("Please enter a valid password!", getExtentTest()), "Validation failed: Expected password error");
    	
    }
    @Test(dataProvider = "negativeLoginData", dataProviderClass = CSVDataProvider.class, groups = {"login", "smoke", "negative"})
    public void NegativeTest_LoginWithInvalidEmail(Map<String, String> data) {
   
    	
    }
    @Test(dataProvider = "negativeLoginData", dataProviderClass = CSVDataProvider.class, groups = {"login", "smoke", "negative"})
    public void NegativeTest_LoginWithInvalidPhone(Map<String, String> data) {
   
    	
    }
    @Test(dataProvider = "negativeLoginData", dataProviderClass = CSVDataProvider.class, groups = {"login", "smoke", "negative"})
    public void NegativeTest_LoginWithValidEmailAndInvalidPassword(Map<String, String> data) {
   
    	
    }
    @Test(dataProvider = "negativeLoginData", dataProviderClass = CSVDataProvider.class, groups = {"login", "smoke", "negative"})
    public void NegativeTest_LoginWithValidPhoneAndInvalidPassword(Map<String, String> data) {
   
    	
    }
    
}
