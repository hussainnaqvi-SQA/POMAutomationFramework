package com.automation.base;

import com.automation.reports.ExtentManager;
import com.automation.reports.ExtentTestManager;
import com.automation.utils.ConfigReader;
import com.automation.utils.DriverManager;
import com.automation.utils.LoggerUtil;
import com.automation.utils.ScreenshotUtils;
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import io.appium.java_client.AppiumDriver;
import io.appium.java_client.InteractsWithApps;
import org.testng.ITestResult;
import org.testng.annotations.*;

import java.lang.reflect.Method;

public class BaseTest {
    protected static ExtentReports extent;

    public ExtentTest getExtentTest() {
        return ExtentTestManager.getTest();
    }

    @BeforeSuite
    public void setupSuite() {
        extent = ExtentManager.getInstance();
    }

    @AfterSuite(alwaysRun = true)
    public void tearDownSuite() {
        if (extent != null) {
            extent.flush();
            System.out.println("üìÑ Final Extent report flushed.");
        }
    }

    @BeforeMethod(alwaysRun = true)
    public void setupTest(Method method) {
        ExtentTest test = extent.createTest(method.getName());
        ExtentTestManager.setTest(test);

        LoggerUtil.logInfo(LoggerUtil.getLogger(getClass()), "===== Starting Test: " + method.getName() + " =====");
        test.info("Starting Test: " + method.getName());

        // ‚ö° Ensure fresh driver each time
        DriverManager.quitDriver();
        DriverManager.initDriver();

        AppiumDriver driver = DriverManager.getDriver();

        // ‚úÖ Reset app state before each test iteration
        try {
            InteractsWithApps appDriver = (InteractsWithApps) driver;
            appDriver.terminateApp(ConfigReader.get("appPackage"));
            appDriver.activateApp(ConfigReader.get("appPackage"));
            LoggerUtil.logInfo(LoggerUtil.getLogger(getClass()), "App restarted successfully.");
        } catch (Exception e) {
            LoggerUtil.logError(LoggerUtil.getLogger(getClass()), "‚ö†Ô∏è Failed to reset app: " + e.getMessage());
            throw e;
        }

        System.out.println("Driver hash: " + DriverManager.getDriver().hashCode());
    }

    
    @AfterMethod(alwaysRun = true)
    public void tearDownTest(ITestResult result) {
        ExtentTest test = ExtentTestManager.getTest();

        if (result.getStatus() == ITestResult.FAILURE) {
            String shortMessage = (result.getThrowable() != null && result.getThrowable().getMessage() != null)
                    ? result.getThrowable().getMessage().split("\n")[0]
                    : "Test Failed";

            test.fail("‚ùå " + shortMessage);

            // üì∏ Screenshot only for failures
            String screenshotPath = ScreenshotUtils.captureScreenshot(result.getName());
            if (screenshotPath != null) {
                test.addScreenCaptureFromPath(screenshotPath);
            }

        } else if (result.getStatus() == ITestResult.SKIP) {
            test.skip("‚ö†Ô∏è Test Skipped");
        }
        // ‚ùå Remove SUCCESS logging here ‚Üí BasePage already logs "Validation passed"
        // ‚ùå Remove extra screenshots here ‚Üí handled above for failures only

        DriverManager.quitDriver();
        if (extent != null) extent.flush();
        ExtentTestManager.removeTest();
    }
}
